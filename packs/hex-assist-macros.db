{"name":"Hex Crawler","permission":{"default":0,"Y2Q5YmIwNzM1ZTg2":3},"type":"script","flags":{},"scope":"global","command":"/*\r\nRequired Rollable Tables:\r\n*Wilderness Encounters*\r\n    coast\r\n    jungle1\r\n    jungle2\r\n    jungle3\r\n    mountains\r\n    rivers\r\n    ruins\r\n    swamp\r\n    wasteland\r\n\r\n*Other Tables*\r\n    weather\r\n    directions\r\n\r\n    cache\r\n    deadexplorers\r\n\r\nCache and Deadexplorers are not mandatory, but if you don't want them search the file for // CACHE LINES or // DEAD EXPLORER LINES and comment out the 2 lines below the comments\r\n\r\nExplanation of those tables:\r\nIf you have an encounter table that has the word cache in it, the cache table will be rolled automatically.\r\n    <br/><span id=\"cache\">The party finds a cache: </span>\r\nIf you have an encounter table that has DeadExplorers in it, the dead explorer table will be rolled automatically.\r\n    <br/><span id=\"DeadExplorers\">The party finds: </span> \r\n\r\n\r\nYou can have an automatic moving \"Actual Location\" Marker by creating a Token named \"Actual Location\" and placing it on your hex grid.\r\nThis will move if the players are \"Lost\". If the players are not lost it will not move.\r\n\r\n\r\n\r\n*/\r\n\r\n\r\n// Macro requires selecting a token to roll the survival check\r\n\r\nif (canvas.tokens.controlled.length === 0)\r\n    return ui.notifications.error(\"Please select the token of the Navigator!\");\r\n\r\nconst playerMarker = canvas.scene.data.tokens.find(a => a.name === 'Player Location');\r\nconst locationMarker = canvas.scene.data.tokens.find(a => a.name === 'Actual Location');\r\n\r\nconst gridSize = canvas.grid.size;\r\nconst vertical = gridSize * 0.866666;\r\nconst diagVertical = gridSize * 0.433333;\r\nconst diagHorizontal = gridSize * 0.75;\r\n\r\n// The option values below are the names of your rollable tables for each hex type. If these get changed here you will need to change them in the Survival Check DC section too!\r\n\r\nlet pace = 'none';\r\nnew Dialog({\r\n    title: `Hex Crawl Helper`,\r\n    content: `\r\n    <form>\r\n        <div class=\"form-group\">\r\n            <label>Hex Type:</label>\r\n            <select id=\"hex-type\" name=\"hex-type\">\r\n                <option value=\"coast\">Coast</option>\r\n                <option value=\"jungle1\">Jungle: No Undead</option>\r\n                <option value=\"jungle2\">Jungle: Lesser Undead</option>\r\n                <option value=\"jungle3\">Jungle: Greater Undead</option>\r\n                <option value=\"mountains\">Mountains</option>\r\n                <option value=\"rivers\">River</option>\r\n                <option value=\"ruins\">Ruins</option>\r\n                <option value=\"swamp\">Swamp</option>\r\n                <option value=\"wasteland\">Wasteland</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label>Travel Direction:</label>\r\n            <select id=\"travel-direction\" name=\"travel-direction\">\r\n                <option value=\"North\">North</option>\r\n                <option value=\"Northeast\">Northeast</option>\r\n                <option value=\"Southeast\">Southeast</option>\r\n                <option value=\"South\">South</option>\r\n                <option value=\"Southwest\">Southwest</option>\r\n                <option value=\"Northwest\">Northwest</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label>Travel Type:</label>\r\n            <select id=\"travel-type\" name=\"travel-type\">\r\n                <option value=\"on-foot\">On Foot</option>\r\n                <option value=\"canoe\">By Canoe</option>\r\n            </select>\r\n        </div>\r\n    </form>\r\n    `,\r\n    buttons: {\r\n        slow: {\r\n            icon: \"<i class='fas fa-user-ninja'></i>\",\r\n            label: `Slow Pace`,\r\n            callback: () => pace = 'slow'\r\n        },\r\n        average: {\r\n            icon: \"<i class='fas fa-hiking'></i>\",\r\n            label: `Average Pace`,\r\n            callback: () => pace = 'average'\r\n        },\r\n        fast: {\r\n            icon: \"<i class='fas fa-running'></i>\",\r\n            label: `Fast Pace`,\r\n            callback: () => pace = 'fast'\r\n        }\r\n    },\r\n    default: \"average\",\r\n    close: html => {\r\n        // set variables\r\n        let hexType = html.find('[name=\"hex-type\"]')[0].value;\r\n        let travelType = html.find('[name=\"travel-type\"]')[0].value;\r\n        let playerDirection = html.find('[name=\"travel-direction\"]')[0].value;\r\n        const weatherTable = game.tables.entities.find(t => t.name === \"weather\");\r\n        const directionTable = game.tables.entities.find(t => t.name === \"directions\");\r\n        const cacheTable = game.tables.entities.find(t => t.name === \"cache\");\r\n        const deadExplorerTable = game.tables.entities.find(t => t.name === \"deadexplorers\");\r\n        const encounterTable = game.tables.entities.find(t => t.name === hexType);\r\n        let weatherRoll = weatherTable.roll()[1].text;\r\n        let lostDirection = directionTable.roll()[1].text;\r\n        let msgContent = '<strong>Weather</strong> ' + weatherRoll + '<br/><br/>';\r\n        let navigator = Actors.instance.get(canvas.tokens.controlled[0].data.actorId);\r\n        let wis = navigator.data.data.abilities.wis.mod;\r\n        let survival = new Roll(`1d20`).roll().total + wis;\r\n        let slowPace = new Roll(`1d4`).roll().total;\r\n        let fastPace = new Roll(`1d2`).roll().total;\r\n        let hexesMoved = 1;\r\n        let encounter = '';\r\n        let hexText = 'hexes';\r\n\r\n        if (travelType === 'canoe') {\r\n            hexesMoved++;\r\n        }\r\n\r\n        // build pace message and hex movement\r\n        if (pace === 'slow') {\r\n            if (slowPace === 1)\r\n                hexesMoved--;\r\n            if (hexesMoved === 1)\r\n                hexText = 'hex';\r\n            msgContent += '<strong>Slow pace:</strong> Can hide from encounters or approach stealthily.<br/><br/><strong>Party can move:</strong> ' + hexesMoved + ' ' + hexText + '.<br/><br/>';\r\n            survival += 5;\r\n        } else if (pace === 'average') {\r\n            if (hexesMoved === 1)\r\n                hexText = 'hex';\r\n            msgContent += '<strong>Average pace:</strong> For rivers, upstream and downstream have no effect, and waterfalls occur every 10 to 20 miles (requiring portage of canoes).<br/><br/><strong>Party can move:</strong> ' + hexesMoved + ' ' + hexText + '.<br/><br/>';\r\n        } else if (pace === 'fast') {\r\n            if (fastPace === 1)\r\n                hexesMoved++;\r\n            if (hexesMoved === 1)\r\n                hexText = 'hex';\r\n            msgContent += '<strong>Fast pace:</strong> -5 to passive Perception.<br/><br/><strong>Party can move:</strong> ' + hexesMoved + ' ' + hexText + '.<br/><br/>';\r\n            survival -= 5;\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        // Survival Check DC for each hex type. If selected token rolls under DC the party is lost!\r\n        if (((hexType === 'coast' || hexType === 'ruins') && survival < 10) || ((hexType === 'jungle1' || hexType === 'jungle2' || hexType === 'jungle3' || hexType === 'mountains' || hexType === 'rivers' || hexType === 'swamp' || hexType === 'wasteland') && survival < 15)) {\r\n            msgContent += '<strong>Party is Lost:</strong> Move actual location ' + hexesMoved + ' ' + hexText + ' to the ' + lostDirection + '<br/><br/>';\r\n            if (locationMarker) {\r\n                const locToken = canvas.tokens.get(locationMarker._id);\r\n                switch (lostDirection) {\r\n                    case 'South':\r\n                        locToken.update({\r\n                            x: locToken.x,\r\n                            y: locToken.y + (vertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Southwest':\r\n                        locToken.update({\r\n                            x: locToken.x - (diagHorizontal * hexesMoved),\r\n                            y: locToken.y + (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Southeast':\r\n                        locToken.update({\r\n                            x: locToken.x + (diagHorizontal * hexesMoved),\r\n                            y: locToken.y + (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'North':\r\n                        locToken.update({\r\n                            x: locToken.x,\r\n                            y: locToken.y - (vertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Northwest':\r\n                        locToken.update({\r\n                            x: locToken.x - (diagHorizontal * hexesMoved),\r\n                            y: locToken.y - (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Northeast':\r\n                        locToken.update({\r\n                            x: locToken.x + (diagHorizontal * hexesMoved),\r\n                            y: locToken.y - (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            if (playerMarker) {\r\n                const playerToken = canvas.tokens.get(playerMarker._id);\r\n                switch (playerDirection) {\r\n                    case 'South':\r\n                        playerToken.update({\r\n                            x: playerToken.x,\r\n                            y: playerToken.y + (vertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Southwest':\r\n                        playerToken.update({\r\n                            x: playerToken.x - (diagHorizontal * hexesMoved),\r\n                            y: playerToken.y + (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Southeast':\r\n                        playerToken.update({\r\n                            x: playerToken.x + (diagHorizontal * hexesMoved),\r\n                            y: playerToken.y + (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'North':\r\n                        playerToken.update({\r\n                            x: playerToken.x,\r\n                            y: playerToken.y - (vertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Northwest':\r\n                        playerToken.update({\r\n                            x: playerToken.x - (diagHorizontal * hexesMoved),\r\n                            y: playerToken.y - (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Northeast':\r\n                        playerToken.update({\r\n                            x: playerToken.x + (diagHorizontal * hexesMoved),\r\n                            y: playerToken.y - (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        } else {\r\n            if (playerMarker && locationMarker) {\r\n                const locToken = canvas.tokens.get(locationMarker._id);\r\n                const playerToken = canvas.tokens.get(playerMarker._id);\r\n\r\n                switch (playerDirection) {\r\n                    case 'South':\r\n                        playerToken.update({\r\n                            x: locToken.x,\r\n                            y: locToken.y + (vertical * hexesMoved)\r\n                        });\r\n                        locToken.update({\r\n                            x: locToken.x,\r\n                            y: locToken.y + (vertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Southwest':\r\n                        playerToken.update({\r\n                            x: locToken.x - (diagHorizontal * hexesMoved),\r\n                            y: locToken.y + (diagVertical * hexesMoved)\r\n                        });\r\n                        locToken.update({\r\n                            x: locToken.x - (diagHorizontal * hexesMoved),\r\n                            y: locToken.y + (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Southeast':\r\n                        playerToken.update({\r\n                            x: locToken.x + (diagHorizontal * hexesMoved),\r\n                            y: locToken.y + (diagVertical * hexesMoved)\r\n                        });\r\n                        locToken.update({\r\n                            x: locToken.x + (diagHorizontal * hexesMoved),\r\n                            y: locToken.y + (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'North':\r\n                        playerToken.update({\r\n                            x: locToken.x,\r\n                            y: locToken.y - (vertical * hexesMoved)\r\n                        });\r\n                        locToken.update({\r\n                            x: locToken.x,\r\n                            y: locToken.y - (vertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Northwest':\r\n                        playerToken.update({\r\n                            x: locToken.x - (diagHorizontal * hexesMoved),\r\n                            y: locToken.y - (diagVertical * hexesMoved)\r\n                        });\r\n                        locToken.update({\r\n                            x: locToken.x - (diagHorizontal * hexesMoved),\r\n                            y: locToken.y - (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Northeast':\r\n                        playerToken.update({\r\n                            x: locToken.x + (diagHorizontal * hexesMoved),\r\n                            y: locToken.y - (diagVertical * hexesMoved)\r\n                        });\r\n                        locToken.update({\r\n                            x: locToken.x + (diagHorizontal * hexesMoved),\r\n                            y: locToken.y - (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        msgContent += '<strong>Morning Encounter:</strong> ';\r\n\r\n        if (new Roll(`1d20`).roll().total > 15) {\r\n            encounter = encounterTable.roll()[1].text;\r\n            msgContent += encounter;\r\n            // CACHE LINES comment out the next 2 lines if you don't want to use a cache table!\r\n            if (encounter.indexOf('cache') > -1)\r\n                msgContent += cacheTable.roll()[1].text + '<br/><br/>';\r\n            // DEAD EXPLORER LINES comment out the next 2 lines if you don't want to use a dead explorer table!\r\n            if (encounter.indexOf('DeadExplorers') > -1)\r\n                msgContent += deadExplorerTable.roll()[1].text + '<br/><br/>';\r\n            msgContent += '<strong>Afternoon Encounter:</strong> ';\r\n        } else {\r\n            msgContent += 'None.<br/><br/><strong>Afternoon Encounter:</strong> ';\r\n        }\r\n\r\n        if (new Roll(`1d20`).roll().total > 15) {\r\n            encounter = encounterTable.roll()[1].text;\r\n            msgContent += encounter;\r\n            // CACHE LINES comment out the next 2 lines if you don't want to use a cache table!\r\n            if (encounter.indexOf('cache') > -1)\r\n                msgContent += cacheTable.roll()[1].text + '<br/><br/>';\r\n            // DEAD EXPLORER LINES comment out the next 2 lines if you don't want to use a dead explorer table!\r\n            if (encounter.indexOf('DeadExplorers') > -1)\r\n                msgContent += deadExplorerTable.roll()[1].text + '<br/><br/>';\r\n            msgContent += '<strong>Evening Encounter:</strong> ';\r\n        } else {\r\n            msgContent += 'None.<br/><br/><strong>Evening Encounter:</strong> ';\r\n        }\r\n\r\n        if (new Roll(`1d20`).roll().total > 15) {\r\n            encounter = encounterTable.roll()[1].text;\r\n            msgContent += encounter;\r\n            // CACHE LINES comment out the next 2 lines if you don't want to use a cache table!\r\n            if (encounter.indexOf('cache') > -1)\r\n                msgContent += cacheTable.roll()[1].text + '<br/><br/>';\r\n            // DEAD EXPLORER LINES comment out the next 2 lines if you don't want to use a dead explorer table!\r\n            if (encounter.indexOf('DeadExplorers') > -1)\r\n                msgContent += deadExplorerTable.roll()[1].text + '<br/><br/>';\r\n        } else {\r\n            msgContent += 'None.';\r\n        }\r\n\r\n        // create the message\r\n        let chatData = {\r\n            content: msgContent,\r\n            whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n        };\r\n        ChatMessage.create(chatData, {});\r\n    }\r\n}).render(true);","author":"Y2Q5YmIwNzM1ZTg2","img":"icons/svg/target.svg","actorIds":[],"_id":"cyuQT58oLN8LdYLt"}
{"name":"Reset Hidden Tiles","permission":{"default":0,"Y2Q5YmIwNzM1ZTg2":3},"type":"script","flags":{},"scope":"global","command":"let tiles = canvas.scene.data.tiles.filter(t => t.img.indexOf(\"tile.png\") > -1 && t.hidden == true);\r\n\r\nconsole.log(tiles);\r\n\r\ntiles.forEach(t=> {\r\n    canvas.tiles.get(t._id).update({\r\n        hidden: false\r\n    });\r\n});","author":"Y2Q5YmIwNzM1ZTg2","img":"icons/svg/eye.svg","actorIds":[],"_id":"VAREhtoOrEsWfY22"}
